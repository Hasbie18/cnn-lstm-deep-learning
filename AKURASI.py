{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMUhPXN3oLXpIoC8zk2Dd8U"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bY4JZfTtT_5R","executionInfo":{"status":"ok","timestamp":1720693373168,"user_tz":-420,"elapsed":8081,"user":{"displayName":"Aria Desta Prabu","userId":"14817185561345519828"}},"outputId":"f0bacf3b-de80-4f1c-de4b-00ec4a1d673a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting rdflib\n","  Downloading rdflib-7.0.0-py3-none-any.whl (531 kB)\n","\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/531.9 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[91m━━━━━━━━━━━\u001b[0m\u001b[91m╸\u001b[0m\u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m153.6/531.9 kB\u001b[0m \u001b[31m4.6 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K     \u001b[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[90m╺\u001b[0m\u001b[90m━━━\u001b[0m \u001b[32m481.3/531.9 kB\u001b[0m \u001b[31m6.8 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m531.9/531.9 kB\u001b[0m \u001b[31m6.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting isodate<0.7.0,>=0.6.0 (from rdflib)\n","  Downloading isodate-0.6.1-py2.py3-none-any.whl (41 kB)\n","\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/41.7 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m41.7/41.7 kB\u001b[0m \u001b[31m5.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: pyparsing<4,>=2.1.0 in /usr/local/lib/python3.10/dist-packages (from rdflib) (3.1.2)\n","Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from isodate<0.7.0,>=0.6.0->rdflib) (1.16.0)\n","Installing collected packages: isodate, rdflib\n","Successfully installed isodate-0.6.1 rdflib-7.0.0\n"]}],"source":["!pip install rdflib"]},{"cell_type":"code","source":["from google.colab import files\n","\n","upoadrdf = files.upload()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":74},"id":"AkAwNcU5UBCu","executionInfo":{"status":"ok","timestamp":1720693358248,"user_tz":-420,"elapsed":38092,"user":{"displayName":"Aria Desta Prabu","userId":"14817185561345519828"}},"outputId":"6900fbe4-219f-46a5-e376-cb64a808125b"},"execution_count":1,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-3d77bb7a-aa55-4af3-b516-26902645ade5\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-3d77bb7a-aa55-4af3-b516-26902645ade5\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving dataku.rdf to dataku.rdf\n"]}]},{"cell_type":"code","source":["import re\n","import numpy as np\n","import tensorflow as tf\n","from keras.preprocessing.text import Tokenizer\n","from keras.preprocessing.sequence import pad_sequences\n","from keras.models import Sequential\n","from keras.layers import Embedding, LSTM, Dense, Dropout\n","from rdflib import Graph,Namespace,URIRef,Literal\n","\n","\n","g = Graph()\n","EX = Namespace(\"http://www.semanticweb.org/user/ontologies/2023/11/untitled-ontology-40#\")\n","RDFS = Namespace(\"http://www.w3.org/2000/01/rdf-schema#\")\n","g.bind(\"rdfs\", RDFS)\n","g.bind(\"ex\", EX)\n","g.parse(\"dataku.rdf\", format='xml')\n","b = \"http://www.semanticweb.org/user/ontologies/2023/11/untitled-ontology-40#\"\n","\n","\n","def loadGejala():\n","    list_gejala = []\n","    for s,p,o in g:\n","            if p == EX.memilikiGejala:\n","                list_gejala.append(get_object_name(o))\n","    return list_gejala\n","\n","def get_object_name(obj):\n","    if isinstance(obj, URIRef):\n","        return obj.split(\"#\")[-1]  # Mengambil bagian akhir URI setelah karakter '#'\n","    elif isinstance(obj, Literal):\n","        return obj.toPython()  # Mengambil nilai teks dari Literal\n","    return None\n","\n","\n","# Step 1: Preprocessing\n","def preprocess_text(text):\n","    text = text.lower()\n","    text = re.sub(r'\\W+', ' ', text)\n","    return text\n","\n","# INPUTAN USER\n","input_text = 'Terdapat embun pada tanaman saya daun mengering pada hari ini dan beraroma busuk'\n","\n","pre_target_words = loadGejala()\n","\n","# Preprocessing input and target words\n","processed_input = preprocess_text(input_text)\n","processed_target_words = [preprocess_text(word) for word in pre_target_words]\n","\n","# Step 2: Searching for target words in the input\n","def search_target_in_input(processed_input, processed_target_words):\n","    found_words = []\n","    for word in processed_target_words:\n","        if word.replace(\"_\", \" \") in processed_input:\n","            found_words.append(word)\n","    return found_words\n","\n","found_words = search_target_in_input(processed_input, processed_target_words)\n","print(\"Found words in input:\", found_words)\n","\n","# Step 3: Prepare the data for LSTM\n","# Assuming we have a dataset\n","# For the sake of example, let's create dummy data\n","texts = [\"tanaman saya beraroma busuk\", \"daun mengering di pagi hari\", \"warna daun hijau dan segar\", 'mengering pada daun','terdapat embun']\n","labels = [1, 1, 0, 1, 1]  # Let's say 1  target word, 0 indicates absence\n","\n","# Preprocess the texts\n","processed_texts = [preprocess_text(i) for i in texts]\n","\n","# Tokenize the texts\n","tokenizer = Tokenizer(num_words=5000)\n","tokenizer.fit_on_texts(processed_texts)\n","sequences = tokenizer.texts_to_sequences(processed_texts)\n","word_index = tokenizer.word_index\n","data = pad_sequences(sequences, maxlen=100)\n","\n","# Split the data into training and testing sets\n","x_train = np.array(data)\n","y_train = np.array(labels)\n","\n","# Step 4: Build and Train LSTM Model\n","model = Sequential()\n","model.add(Embedding(input_dim=5000, output_dim=128, input_length=100))\n","model.add(LSTM(128, return_sequences=True))\n","model.add(Dropout(0.2))\n","model.add(LSTM(128))\n","model.add(Dropout(0.2))\n","model.add(Dense(1, activation='sigmoid'))\n","\n","model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","\n","# Train the model\n","model.fit(x_train, y_train, epochs=50, batch_size=32, validation_split=0.2)\n","\n","# Evaluate the model\n","loss, accuracy = model.evaluate(x_train, y_train)\n","print(f'Accuracy: {accuracy}')\n","accuracy_percent = accuracy * 100\n","print(f'Accuracy percent: {accuracy_percent}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"S4fD5gLfUJa1","executionInfo":{"status":"ok","timestamp":1720693409818,"user_tz":-420,"elapsed":32854,"user":{"displayName":"Aria Desta Prabu","userId":"14817185561345519828"}},"outputId":"cc395c99-da04-421a-dba9-447da36ceb5d"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Found words in input: ['daun_mengering', 'aroma_busuk']\n","Epoch 1/50\n","1/1 [==============================] - 13s 13s/step - loss: 0.6934 - accuracy: 0.2500 - val_loss: 0.6439 - val_accuracy: 1.0000\n","Epoch 2/50\n","1/1 [==============================] - 0s 169ms/step - loss: 0.6704 - accuracy: 0.7500 - val_loss: 0.5859 - val_accuracy: 1.0000\n","Epoch 3/50\n","1/1 [==============================] - 0s 206ms/step - loss: 0.6448 - accuracy: 0.7500 - val_loss: 0.5026 - val_accuracy: 1.0000\n","Epoch 4/50\n","1/1 [==============================] - 0s 181ms/step - loss: 0.6053 - accuracy: 0.7500 - val_loss: 0.3778 - val_accuracy: 1.0000\n","Epoch 5/50\n","1/1 [==============================] - 0s 169ms/step - loss: 0.5598 - accuracy: 0.7500 - val_loss: 0.2130 - val_accuracy: 1.0000\n","Epoch 6/50\n","1/1 [==============================] - 0s 172ms/step - loss: 0.5495 - accuracy: 0.7500 - val_loss: 0.1526 - val_accuracy: 1.0000\n","Epoch 7/50\n","1/1 [==============================] - 0s 187ms/step - loss: 0.5875 - accuracy: 0.7500 - val_loss: 0.1880 - val_accuracy: 1.0000\n","Epoch 8/50\n","1/1 [==============================] - 0s 172ms/step - loss: 0.5464 - accuracy: 0.7500 - val_loss: 0.2438 - val_accuracy: 1.0000\n","Epoch 9/50\n","1/1 [==============================] - 0s 173ms/step - loss: 0.5122 - accuracy: 0.7500 - val_loss: 0.2842 - val_accuracy: 1.0000\n","Epoch 10/50\n","1/1 [==============================] - 0s 177ms/step - loss: 0.5331 - accuracy: 0.7500 - val_loss: 0.3093 - val_accuracy: 1.0000\n","Epoch 11/50\n","1/1 [==============================] - 0s 164ms/step - loss: 0.5220 - accuracy: 0.7500 - val_loss: 0.3121 - val_accuracy: 1.0000\n","Epoch 12/50\n","1/1 [==============================] - 0s 178ms/step - loss: 0.5436 - accuracy: 0.7500 - val_loss: 0.3075 - val_accuracy: 1.0000\n","Epoch 13/50\n","1/1 [==============================] - 0s 169ms/step - loss: 0.5551 - accuracy: 0.7500 - val_loss: 0.2968 - val_accuracy: 1.0000\n","Epoch 14/50\n","1/1 [==============================] - 0s 162ms/step - loss: 0.5062 - accuracy: 0.7500 - val_loss: 0.2754 - val_accuracy: 1.0000\n","Epoch 15/50\n","1/1 [==============================] - 0s 172ms/step - loss: 0.5217 - accuracy: 0.7500 - val_loss: 0.2538 - val_accuracy: 1.0000\n","Epoch 16/50\n","1/1 [==============================] - 0s 174ms/step - loss: 0.4966 - accuracy: 0.7500 - val_loss: 0.2335 - val_accuracy: 1.0000\n","Epoch 17/50\n","1/1 [==============================] - 0s 165ms/step - loss: 0.4969 - accuracy: 0.7500 - val_loss: 0.2208 - val_accuracy: 1.0000\n","Epoch 18/50\n","1/1 [==============================] - 0s 219ms/step - loss: 0.4512 - accuracy: 0.7500 - val_loss: 0.2130 - val_accuracy: 1.0000\n","Epoch 19/50\n","1/1 [==============================] - 0s 162ms/step - loss: 0.4762 - accuracy: 0.7500 - val_loss: 0.2116 - val_accuracy: 1.0000\n","Epoch 20/50\n","1/1 [==============================] - 0s 164ms/step - loss: 0.4681 - accuracy: 0.7500 - val_loss: 0.2147 - val_accuracy: 1.0000\n","Epoch 21/50\n","1/1 [==============================] - 0s 212ms/step - loss: 0.4493 - accuracy: 0.7500 - val_loss: 0.2246 - val_accuracy: 1.0000\n","Epoch 22/50\n","1/1 [==============================] - 0s 164ms/step - loss: 0.4357 - accuracy: 0.7500 - val_loss: 0.2231 - val_accuracy: 1.0000\n","Epoch 23/50\n","1/1 [==============================] - 0s 217ms/step - loss: 0.4020 - accuracy: 0.7500 - val_loss: 0.1996 - val_accuracy: 1.0000\n","Epoch 24/50\n","1/1 [==============================] - 0s 168ms/step - loss: 0.4011 - accuracy: 0.7500 - val_loss: 0.1669 - val_accuracy: 1.0000\n","Epoch 25/50\n","1/1 [==============================] - 0s 170ms/step - loss: 0.3943 - accuracy: 0.7500 - val_loss: 0.1566 - val_accuracy: 1.0000\n","Epoch 26/50\n","1/1 [==============================] - 0s 242ms/step - loss: 0.3548 - accuracy: 0.7500 - val_loss: 0.1689 - val_accuracy: 1.0000\n","Epoch 27/50\n","1/1 [==============================] - 0s 266ms/step - loss: 0.2943 - accuracy: 0.7500 - val_loss: 0.1860 - val_accuracy: 1.0000\n","Epoch 28/50\n","1/1 [==============================] - 0s 284ms/step - loss: 0.2814 - accuracy: 1.0000 - val_loss: 0.1965 - val_accuracy: 1.0000\n","Epoch 29/50\n","1/1 [==============================] - 0s 201ms/step - loss: 0.2670 - accuracy: 1.0000 - val_loss: 0.1745 - val_accuracy: 1.0000\n","Epoch 30/50\n","1/1 [==============================] - 0s 169ms/step - loss: 0.2336 - accuracy: 1.0000 - val_loss: 0.1234 - val_accuracy: 1.0000\n","Epoch 31/50\n","1/1 [==============================] - 0s 211ms/step - loss: 0.2033 - accuracy: 1.0000 - val_loss: 0.0700 - val_accuracy: 1.0000\n","Epoch 32/50\n","1/1 [==============================] - 0s 180ms/step - loss: 0.1346 - accuracy: 1.0000 - val_loss: 0.0514 - val_accuracy: 1.0000\n","Epoch 33/50\n","1/1 [==============================] - 0s 191ms/step - loss: 0.1195 - accuracy: 1.0000 - val_loss: 0.0618 - val_accuracy: 1.0000\n","Epoch 34/50\n","1/1 [==============================] - 0s 205ms/step - loss: 0.0711 - accuracy: 1.0000 - val_loss: 0.0803 - val_accuracy: 1.0000\n","Epoch 35/50\n","1/1 [==============================] - 0s 251ms/step - loss: 0.0591 - accuracy: 1.0000 - val_loss: 0.0444 - val_accuracy: 1.0000\n","Epoch 36/50\n","1/1 [==============================] - 0s 353ms/step - loss: 0.0479 - accuracy: 1.0000 - val_loss: 0.0180 - val_accuracy: 1.0000\n","Epoch 37/50\n","1/1 [==============================] - 0s 246ms/step - loss: 0.0363 - accuracy: 1.0000 - val_loss: 0.0406 - val_accuracy: 1.0000\n","Epoch 38/50\n","1/1 [==============================] - 0s 260ms/step - loss: 0.0246 - accuracy: 1.0000 - val_loss: 0.0032 - val_accuracy: 1.0000\n","Epoch 39/50\n","1/1 [==============================] - 0s 259ms/step - loss: 0.0127 - accuracy: 1.0000 - val_loss: 0.0013 - val_accuracy: 1.0000\n","Epoch 40/50\n","1/1 [==============================] - 0s 289ms/step - loss: 0.0234 - accuracy: 1.0000 - val_loss: 0.0018 - val_accuracy: 1.0000\n","Epoch 41/50\n","1/1 [==============================] - 0s 281ms/step - loss: 0.0105 - accuracy: 1.0000 - val_loss: 0.0259 - val_accuracy: 1.0000\n","Epoch 42/50\n","1/1 [==============================] - 0s 277ms/step - loss: 0.0096 - accuracy: 1.0000 - val_loss: 0.0271 - val_accuracy: 1.0000\n","Epoch 43/50\n","1/1 [==============================] - 0s 278ms/step - loss: 0.0076 - accuracy: 1.0000 - val_loss: 0.0042 - val_accuracy: 1.0000\n","Epoch 44/50\n","1/1 [==============================] - 0s 305ms/step - loss: 0.0038 - accuracy: 1.0000 - val_loss: 0.0012 - val_accuracy: 1.0000\n","Epoch 45/50\n","1/1 [==============================] - 0s 288ms/step - loss: 0.0023 - accuracy: 1.0000 - val_loss: 6.9161e-04 - val_accuracy: 1.0000\n","Epoch 46/50\n","1/1 [==============================] - 0s 257ms/step - loss: 0.0031 - accuracy: 1.0000 - val_loss: 9.5296e-04 - val_accuracy: 1.0000\n","Epoch 47/50\n","1/1 [==============================] - 0s 210ms/step - loss: 0.0033 - accuracy: 1.0000 - val_loss: 0.0030 - val_accuracy: 1.0000\n","Epoch 48/50\n","1/1 [==============================] - 0s 176ms/step - loss: 0.0031 - accuracy: 1.0000 - val_loss: 0.0108 - val_accuracy: 1.0000\n","Epoch 49/50\n","1/1 [==============================] - 0s 161ms/step - loss: 0.0033 - accuracy: 1.0000 - val_loss: 0.0196 - val_accuracy: 1.0000\n","Epoch 50/50\n","1/1 [==============================] - 0s 168ms/step - loss: 0.0031 - accuracy: 1.0000 - val_loss: 0.0106 - val_accuracy: 1.0000\n","1/1 [==============================] - 0s 46ms/step - loss: 0.0034 - accuracy: 1.0000\n","Accuracy: 1.0\n","Accuracy percent: 100.0\n"]}]}]}